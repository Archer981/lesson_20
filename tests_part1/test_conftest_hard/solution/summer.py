# фаил с тестами № 1
# В этом задании наряду с функцией summer
# имеются также другая функция аналогичного действия
# которая не складывает,  перемножает элементы списка.
#
# В текущем задании у Вас имеется 2 модуля, которые содержат тесты:
# main_summer_test.py
# main_multiplicator_test.py
# Для тестирования этих функций необходимо создать условия с помощью фикстур
# чтобы функции не возвращали ошибок
# 
# В таком случае общую фикстуру удобно разместить в отдельном файле conftest.py
# При запуске тестов фикстуры из этого файла будут использоваться
# как модулем main_summer_test.py, так и модулем main_multiplicator_test.py
#
# Вам необходимо:
# 1. Создать файл conftest.py
# 2. Написать фикстуру list_creater, которая бы 
#    изменяла тип данных элементов списка 
#    String на Integer.
# 3. В каждом файле (main_summer_test.py, main_multiplicator_test.py)
#    сделать рефакторинг переменной incoming list - переделав её в фикстуру
#    (В нашем задании для каждой функции свой список)
# 4. Написать тесты для проверки соответсвующих функций, воспользовавшись
#    фикстурой определённой в файле conftest.py
#
#    Для общего механизма фикстур следует понять что происходит "под капотом":
#    1. Запуск теста - pytest собирает все фикстуры и определяет модули с тестами
#       Если pytest запущен из директории с заданием то в качестве тестовых модулей будут 
#       найдены файлы main_summer_test.py, main_multiplicator_test.py и файл с общей фикстурой
#       conftest.
#    2. Pytest начинает по порядку запускать тестовые модули.
#       Сначала запускается модуль main_summer_test.py
#       в котором содержится фикстура incoming_list.
#    3. При запуске функции test_sum_numbers в аргументе содержится 
#       название фикстуры (list_creater) из файла conftest.py
#    4. Аргументом задекорированной функции является переменная incoming list
#       которая была инициализирована в файле main_summer_test.py
#    5. После сбора всех фикстур происходит тестирование файла.
#    6. Далее запускается модуль main_multiplicator_test и история повторяется с пунтка 2,
#       однако в качестве фикстуры со списком используется уже другая фикстура с таким же названием
#       incoming_list, которая определена в модуле main_multiplicator_test.
#
#       Таким образом мы, используя различные входные данные, применяем к ним один и тот же
#       алгоритм приведения их в соответствие, и тестируем различные функции.
#
#    P.S. Импорт фикстуры в файл с тестами делать не нужно.
#    Если всё решено правильно, библиотека pytest сделает это автоматически.
#
# Исходнае данные:
import os
import pytest

@pytest.fixture
def incoming_list():
    return [7, "4", 15, "12", 95, 5, 3 ,8]

# Исходная функция:
def summer(*args):
    return sum(args)

def test_sum_numbers(list_creator):
    list_sum = sum(list_creator)
    assert summer(*list_creator) == list_sum


if __name__ == "__main__":
    os.system("pytest")